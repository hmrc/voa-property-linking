# microservice specific routes

GET          /property-representations/validate-agent-code/:agentCode/:authorisationId        @controllers.PropertyRepresentationController.validateAgentCode(agentCode:Long, authorisationId: Long)
GET          /property-representations/agent/:status/:organisationId                          @controllers.PropertyRepresentationController.forAgent(status: String, organisationId: Long, pagination: models.PaginationParams ?= models.DefaultPaginationParams)

POST         /property-representations/create                                                 @controllers.PropertyRepresentationController.create()

PATCH        /property-representations/revoke/:authorisedPartyId                              @controllers.PropertyRepresentationController.revoke(authorisedPartyId: Long)
PUT          /property-representations/response                                               @controllers.PropertyRepresentationController.response()

GET          /property-links-appointable                                                      @controllers.PropertyRepresentationController.appointableToAgent(ownerId: Long, agentCode: Long, checkPermission: Option[String], challengePermission: Option[String], params: models.PaginationParams, sortfield: Option[String], sortorder: Option[String], address: Option[String], agent: Option[String])

GET          /owner/property-links                                                            @controllers.PropertyLinkingController.getMyOrganisationsPropertyLinks(searchParams: binders.GetPropertyLinksParameters, params: Option[models.PaginationParams])
GET          /agent/property-links                                                            @controllers.PropertyLinkingController.getClientsPropertyLinks(searchParams: binders.GetPropertyLinksParameters, params: Option[models.PaginationParams])

POST         /property-links                                                                  @controllers.PropertyLinkingController.create()
GET          /owner/property-links/:submissionId/                                             @controllers.PropertyLinkingController.getMyOrganisationsPropertyLink(submissionId: String)
GET          /agent/property-links/:submissionId/                                             @controllers.PropertyLinkingController.getClientsPropertyLink(submissionId: String)

GET          /property-links/client-property/:authorisationId                                 @controllers.PropertyLinkingController.clientProperty(authorisationId: Long, clientOrganisationId: Long, agentOrganisationId: Long)

GET          /dashboard/owner/assessments/:submissionId                                       @controllers.PropertyLinkingController.getMyOrganisationsAssessments(submissionId: String)
GET          /dashboard/agent/assessments/:submissionId                                       @controllers.PropertyLinkingController.getClientsAssessments(submissionId: String)
GET          /dashboard/owner/assessments/:submissionId/:authorisationId                      @controllers.PropertyLinkingController.getMyOrganisationsAssessmentsWithCapacity(submissionId: String, authorisationId: Long)
GET          /dashboard/agent/assessments/:submissionId/:authorisationId                      @controllers.PropertyLinkingController.getClientsAssessmentsWithCapacity(submissionId: String, authorisationId: Long)



# Manage Agents
GET          /manage-agents/:id/agents                                                        @controllers.AgentController.manageAgents(id: Long)

GET          /individuals/:personId                                                           @controllers.IndividualAccountController.get(personId: Long)
GET          /individuals                                                                     @controllers.IndividualAccountController.withExternalId(externalId)
POST         /individuals                                                                     @controllers.IndividualAccountController.create()
PUT          /individuals/:personId                                                           @controllers.IndividualAccountController.update(personId: Long)

GET          /groups/:organisationId                                                          @controllers.GroupAccountController.get(organisationId: Long)
GET          /groups                                                                          @controllers.GroupAccountController.withGroupId(groupId)
GET          /groups/agentCode/:agentCode                                                     @controllers.GroupAccountController.withAgentCode(agentCode)
POST         /groups                                                                          @controllers.GroupAccountController.create()
PUT          /groups/:orgId                                                                   @controllers.GroupAccountController.update(orgId: Long)

POST         /envelopes                                                                       @controllers.EnvelopeController.create
POST         /envelopes/:envId                                                                @controllers.EnvelopeController.record(envId: String)
PUT          /envelopes/:envId                                                                @controllers.EnvelopeController.close(envId: String)

POST         /file-callback                                                                   @controllers.FileTransferController.handleCallback()
GET          /transfer                                                                        @controllers.FileTransferController.run()

GET          /address                                                                         @controllers.AddressLookup.find(postcode)
GET          /address/:id                                                                     @controllers.AddressLookup.get(id: Long)
POST         /address                                                                         @controllers.AddressLookup.create

GET          /submissionId/:prefix                                                            @controllers.SubmissionIdController.get(prefix: String)

POST         /request-detailed-valuation                                                      @controllers.DVRCaseManagement.requestDetailedValuation
POST         /detailed-valuation                                                              @controllers.DVRCaseManagement.requestDetailedValuationV2
GET          /properties/:uarn/valuation/:valuationId/files                                   @controllers.DVRCaseManagement.getDvrDocuments(valuationId: Long, uarn: Long, propertyLinkId: String)
GET          /properties/:uarn/valuation/:valuationId/files/:ref                              @controllers.DVRCaseManagement.getDvrDocument(valuationId: Long, uarn: Long, propertyLinkId: String, ref: String)
GET          /dvr-exists                                                                      @controllers.DVRCaseManagement.dvrExists(organisationId: Long, assessmentRef: Long)


GET          /check-cases/:submissionId/:party                                                @controllers.CheckCaseController.getCheckCases(submissionId: String, party: String)

GET          /property-links/:plSubmissionId/check-cases/:checkCaseRef/canChallenge           @controllers.ChallengeController.canChallenge(plSubmissionId: String, checkCaseRef: String, valuationId: Long, party: String)