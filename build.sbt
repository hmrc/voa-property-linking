import play.sbt.PlayImport.*
import play.sbt.routes.RoutesKeys
import sbt.Keys.*
import sbt.Tests.{Group, SubProcess}
import sbt.*
import uk.gov.hmrc.DefaultBuildSettings.*
import uk.gov.hmrc.sbtdistributables.SbtDistributablesPlugin
import uk.gov.hmrc.{DefaultBuildSettings, SbtAutoBuildPlugin}

lazy val appName = "voa-property-linking"

lazy val playSettings: Seq[Setting[_]] = Seq(
  RoutesKeys.routesImport ++= Seq(
    "uk.gov.hmrc.voapropertylinking.binders.propertylinks._",
    "uk.gov.hmrc.voapropertylinking.binders.clients._",
    "uk.gov.hmrc.voapropertylinking.binders.propertylinks.temp._",
    "scala.language.reflectiveCalls",
    "models._"
  )
)

val defaultPort = 9524

ThisBuild / majorVersion := 0
ThisBuild / scalaVersion := "2.13.12"

lazy val scoverageSettings: Seq[Def.Setting[_ >: String with Double with Boolean]] = {
  // Semicolon-separated list of regexs matching classes to exclude
  import scoverage.ScoverageKeys
  Seq(
    ScoverageKeys.coverageExcludedPackages := "<empty>;.*Reverse.*;Reverse.*;views.*;uk.gov.hmrc.voapropertylinking.config.*;.*\\.temp\\..*;.*\\.test\\..*;poc.view.*;poc.uk.gov.hmrc.voapropertylinking.config.*;.*(AuthService|BuildInfo|Routes).*",
    ScoverageKeys.coverageMinimumStmtTotal := 85,
    ScoverageKeys.coverageFailOnMinimum := true,
    ScoverageKeys.coverageHighlighting := true
  )
}

lazy val microservice: Project = Project(appName, file("."))
  .enablePlugins(PlayScala, SbtAutoBuildPlugin, SbtDistributablesPlugin)
  .disablePlugins(JUnitXmlReportPlugin)
  .settings(playSettings *)
  .settings(scoverageSettings *)
  .settings(scalaSettings *)
  .settings(defaultSettings() *)
  .settings(PlayKeys.playDefaultPort := defaultPort)
  .settings(majorVersion := 0)
  .settings(
    libraryDependencies ++= compileDependencies ++ testDependencies,
    retrieveManaged := true,
    Test / testGrouping := oneForkedJvmPerTest((Test / definedTests).value)
  )

lazy val it = project
  .enablePlugins(PlayScala)
  .dependsOn(microservice % "test->test") // the "test->test" allows reusing test code and test dependencies
  .settings(DefaultBuildSettings.itSettings())
  .settings(libraryDependencies ++= testDependencies)
  .settings(Test / classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.AllLibraryJars)

def oneForkedJvmPerTest(tests: Seq[TestDefinition]) = tests.map { test =>
  Group(test.name, Seq(test), SubProcess(ForkOptions().withRunJVMOptions(Vector(s"-Dtest.name=${test.name}"))))
}

scalacOptions ++= Seq("-unchecked", "-deprecation", "-feature")

// silence all warnings on autogenerated files
scalacOptions += "-Wconf:src=routes/.*:s"
scalacOptions += "-Wconf:cat=unused-imports&src=html/.*:s"

val bootstrapPlayVersion = "8.4.0"
val hmrcMongoVersion = "1.7.0"

val compileDependencies = Seq(
  ws,
  guice,
  "uk.gov.hmrc"        %% "bootstrap-backend-play-30" % bootstrapPlayVersion,
  "uk.gov.hmrc.mongo"  %% "hmrc-mongo-play-30"        % hmrcMongoVersion,
  "org.typelevel"      %% "cats-core"                 % "2.10.0",
  "com.typesafe.play"  %% "play-json"                 % "2.10.4",
  "uk.gov.hmrc"        %% "uri-template"              % "1.11.0",
  "ai.x"               %% "play-json-extensions"      % "0.42.0",
  "org.apache.commons" % "commons-text"               % "1.11.0"
)

val testDependencies = Seq(
  "uk.gov.hmrc"            %% "bootstrap-test-play-30"  % bootstrapPlayVersion  % Test,
  "org.scalatest"          %% "scalatest"               % "3.2.17"              % Test,
  "org.pegdown"            % "pegdown"                  % "1.6.0"               % Test,
  "org.scalatestplus.play" %% "scalatestplus-play"      % "7.0.1"               % Test,
  "org.mockito"            % "mockito-core"             % "5.10.0"              % Test,
  "org.scalatestplus"      %% "mockito-3-4"             % "3.2.10.0"            % Test,
  "com.vladsch.flexmark"   % "flexmark-all"             % "0.64.8"              % Test,
  "org.scalacheck"         %% "scalacheck"              % "1.17.0"              % Test,
  "uk.gov.hmrc.mongo"      %% "hmrc-mongo-test-play-30" % hmrcMongoVersion      % Test,
  "com.github.tomakehurst" % "wiremock-jre8"            % "3.0.1"               % Test
)

addCommandAlias("precommit", ";scalafmt;test:scalafmt;it/test:scalafmt;coverage;test;it/test;coverageReport")
